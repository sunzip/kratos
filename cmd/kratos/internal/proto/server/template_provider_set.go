package server

import (
	"bytes"
	"html/template"
)

var providerSetTemplate = `
{{- /* delete empty line */ -}}
// Code generated by {{ .ToolName }}. DO NOT EDIT.
// versions:
// 	v0.1
// source: {{ .SourceProto }}

package {{ .ServiceLower }}

import (
	{{- if .UseContext }}
	"context"
	{{- end }}
	{{- if .UseIO }}
	"io"
	{{- end }}
	"{{ .ModulePackage }}/{{ .ServiceLower }}/app"
	"{{ .ModulePackage }}/{{ .ServiceLower }}/repo"
	"{{ .ModulePackage }}/{{ .ServiceLower }}/service"
	"github.com/google/wire"
)

var ProviderSet = wire.NewSet(app.New{{ .Service }}App, service.New{{ .Service }}Service, repo.New{{ .Service }}Repo)
`

// 生成provider_set.go
func (s *Service) executeProviderSet() ([]byte, error) {
	const empty = "google.protobuf.Empty"
	buf := new(bytes.Buffer)
	for _, method := range s.Methods {
		if (method.Type == unaryType && (method.Request == empty || method.Reply == empty)) ||
			(method.Type == returnsStreamsType && method.Request == empty) {
			s.GoogleEmpty = true
		}
		if method.Type == twoWayStreamsType || method.Type == requestStreamsType {
			s.UseIO = true
		}
		s.UseContext = false
		/* if method.Type == unaryType {
			s.UseContext = true
		} */
	}
	tmpl, err := template.New("providerSet").Parse(providerSetTemplate)
	if err != nil {
		return nil, err
	}

	if err := tmpl.Execute(buf, s); err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
